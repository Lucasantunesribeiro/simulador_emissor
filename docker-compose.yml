version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: NFe.API/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ConnectionStrings__DefaultConnection=Host=db;Database=${POSTGRES_DB:-nfedb};Username=${POSTGRES_USER:-nfeadmin};Password=${POSTGRES_PASSWORD:-nfepass123}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - nfe-network

  worker:
    build:
      context: .
      dockerfile: NFe.Worker/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ConnectionStrings__DefaultConnection=Host=db;Database=${POSTGRES_DB:-nfedb};Username=${POSTGRES_USER:-nfeadmin};Password=${POSTGRES_PASSWORD:-nfepass123}
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - nfe-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-nfedb}
      - POSTGRES_USER=${POSTGRES_USER:-nfeadmin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-nfepass123}
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nfeadmin} -d ${POSTGRES_DB:-nfedb}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - nfe-network

networks:
  nfe-network:
    driver: bridge

volumes:
  pgdata:

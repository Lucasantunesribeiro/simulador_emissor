version: '3.8'

services:
  # API NFe - Configuração de Produção
  nfe-api:
    image: nfe-api:production
    container_name: nfe-api-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - NFE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ConnectionStrings__DefaultConnection=${PROD_DB_CONNECTION_STRING}
      - AWS__Region=${AWS_REGION}
      - AWS__SecretsManager__CertificateSecretName=${AWS_CERTIFICATE_SECRET_NAME}
      - AWS__SecretsManager__CertificatePasswordSecretName=${AWS_CERTIFICATE_PASSWORD_SECRET_NAME}
      - NFe__UseReal=true
      - Sefaz__Ambiente=1
      - Sefaz__UF=${SEFAZ_UF}
      - Sefaz__CNPJ=${SEFAZ_CNPJ}
      - Sefaz__RazaoSocial=${SEFAZ_RAZAO_SOCIAL}
      - Sefaz__InscricaoEstadual=${SEFAZ_INSCRICAO_ESTADUAL}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./certs:/app/certs:ro
      - ./logs:/app/logs
    networks:
      - nfe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Worker NFe - Processamento de Background
  nfe-worker:
    image: nfe-worker:production
    container_name: nfe-worker-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - NFE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${PROD_DB_CONNECTION_STRING}
      - AWS__Region=${AWS_REGION}
      - SQS__QueueUrl=${SQS_QUEUE_URL}
      - SQS__Region=${AWS_REGION}
    networks:
      - nfe-network
    restart: unless-stopped
    depends_on:
      - nfe-api
    healthcheck:
      test: ["CMD", "pgrep", "-f", "NFe.Worker"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis para Cache (Produção)
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - nfe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy com SSL
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - nfe-network
    restart: unless-stopped
    depends_on:
      - nfe-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para Monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - nfe-network
    restart: unless-stopped

  # Grafana para Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN_NAME}
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - nfe-network
    restart: unless-stopped

networks:
  nfe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Configurações específicas para produção
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"

x-restart-policy: &restart-policy
  restart: unless-stopped

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NFe.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NFe.Infrastructure.Migrations
{
    [DbContext(typeof(NFeDbContext))]
    [Migration("20250812205435_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NFe.Core.Entities.ItemVenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CFOP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cfop");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("codigo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descricao");

                    b.Property<string>("NCM")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ncm");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("quantidade");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unidade_medida");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor_unitario");

                    b.Property<Guid>("VendaId")
                        .HasColumnType("uuid")
                        .HasColumnName("venda_id");

                    b.HasKey("Id");

                    b.HasIndex("VendaId");

                    b.ToTable("itens_venda", (string)null);
                });

            modelBuilder.Entity("NFe.Core.Entities.Protocolo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChaveAcesso")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)")
                        .HasColumnName("chave_acesso");

                    b.Property<DateTime>("DataProtocolo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_protocolo");

                    b.Property<string>("MensagemSefaz")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mensagem_sefaz");

                    b.Property<string>("NumeroProtocolo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numero_protocolo");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("VendaId")
                        .HasColumnType("uuid")
                        .HasColumnName("venda_id");

                    b.Property<string>("XmlNFe")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("xml_nfe");

                    b.Property<string>("XmlProtocolo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("xml_protocolo");

                    b.HasKey("Id");

                    b.HasIndex("VendaId");

                    b.ToTable("protocolos", (string)null);
                });

            modelBuilder.Entity("NFe.Core.Entities.Venda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChaveAcesso")
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)")
                        .HasColumnName("chave_acesso");

                    b.Property<string>("ClienteDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cliente_documento");

                    b.Property<string>("ClienteEndereco")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cliente_endereco");

                    b.Property<string>("ClienteNome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cliente_nome");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_venda");

                    b.Property<string>("NumeroNFe")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numero_nfe");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("observacoes");

                    b.Property<string>("SerieNFe")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("serie_nfe");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor_total");

                    b.HasKey("Id");

                    b.ToTable("vendas", (string)null);
                });

            modelBuilder.Entity("NFe.Core.Entities.ItemVenda", b =>
                {
                    b.HasOne("NFe.Core.Entities.Venda", "Venda")
                        .WithMany("Itens")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("NFe.Core.Entities.Protocolo", b =>
                {
                    b.HasOne("NFe.Core.Entities.Venda", "Venda")
                        .WithMany()
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("NFe.Core.Entities.Venda", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}

#!/bin/bash

# Script de ativa√ß√£o do ambiente de produ√ß√£o NFe
# ‚ö†Ô∏è  CUIDADO: Este script ativa o modo REAL de emiss√£o de NFe
# Autor: Sistema NFe
# Data: $(date +%Y-%m-%d)

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

echo "üö® ATIVA√á√ÉO DO MODO PRODU√á√ÉO NFe"
echo "================================"
echo
log_warning "ATEN√á√ÉO: Este script ir√° ativar a emiss√£o REAL de NFe!"
log_warning "Certifique-se de ter executado validate-production-readiness.sh"
echo

# Confirmar ativa√ß√£o
read -p "Tem certeza que deseja ativar o modo PRODU√á√ÉO? (digite 'PRODUCTION_APPROVE'): " confirmation

if [ "$confirmation" != "PRODUCTION_APPROVE" ]; then
    log_error "Ativa√ß√£o cancelada. Confirma√ß√£o incorreta."
    log_info "Para ativar, digite exatamente: PRODUCTION_APPROVE"
    exit 1
fi

echo
log_info "Iniciando ativa√ß√£o do modo produ√ß√£o..."

# 1. Backup de seguran√ßa antes da ativa√ß√£o
echo
log_info "1. Executando backup de seguran√ßa..."
if bash "$(dirname "$0")/backup-database.sh"; then
    log_success "Backup realizado com sucesso"
else
    log_error "Falha no backup - Ativa√ß√£o abortada"
    exit 1
fi

# 2. Atualizar configura√ß√µes no AWS Systems Manager
echo
log_info "2. Atualizando configura√ß√µes de produ√ß√£o..."

# Ativar modo real NFe
aws ssm put-parameter \
    --name "/nfe/production/useReal" \
    --value "true" \
    --type "String" \
    --overwrite || {
    log_error "Falha ao atualizar par√¢metro NFe:UseReal"
    exit 1
}

# Definir ambiente SEFAZ produ√ß√£o
aws ssm put-parameter \
    --name "/nfe/production/ambiente" \
    --value "1" \
    --type "String" \
    --overwrite || {
    log_error "Falha ao atualizar par√¢metro Sefaz:Ambiente"
    exit 1
}

log_success "Configura√ß√µes de produ√ß√£o atualizadas no Parameter Store"

# 3. Reiniciar Lambda functions para aplicar configura√ß√µes
echo
log_info "3. Reiniciando Lambda functions..."

lambda_functions=(
    "nfe-api"
    "nfe-worker"
)

for func in "${lambda_functions[@]}"; do
    if aws lambda update-function-configuration \
        --function-name "$func" \
        --environment Variables="{ASPNETCORE_ENVIRONMENT=Production,NFE_ENVIRONMENT=Production}" \
        &>/dev/null; then
        log_success "Lambda function reiniciada: $func"
    else
        log_warning "Lambda function n√£o encontrada ou erro: $func"
    fi
done

# 4. Executar teste de conectividade SEFAZ
echo
log_info "4. Testando conectividade SEFAZ produ√ß√£o..."

# Aguardar Lambda functions reiniciarem
sleep 10

# Testar endpoint de status da aplica√ß√£o
api_endpoint="${API_GATEWAY_URL}/health"
if curl -s "$api_endpoint" | grep -q "Healthy"; then
    log_success "API em execu√ß√£o e saud√°vel"
else
    log_error "API n√£o est√° respondendo adequadamente"
    log_error "Execute rollback imediatamente: bash scripts/emergency-rollback.sh"
    exit 1
fi

# 5. Testar emiss√£o de NFe de teste (cancelada imediatamente)
echo
log_info "5. Executando teste de produ√ß√£o..."

# Este seria um teste real m√≠nimo que seria cancelado imediatamente
log_warning "‚ö†Ô∏è  TESTE DE PRODU√á√ÉO - NFe real ser√° emitida e cancelada"
log_info "Implementar teste real quando apropriado..."

# 6. Configurar monitoramento espec√≠fico de produ√ß√£o
echo
log_info "6. Configurando monitoramento de produ√ß√£o..."

# Criar alarmes CloudWatch espec√≠ficos para produ√ß√£o
aws cloudwatch put-metric-alarm \
    --alarm-name "NFe-Producao-Erros" \
    --alarm-description "Monitorar erros em produ√ß√£o NFe" \
    --metric-name "Errors" \
    --namespace "AWS/Lambda" \
    --statistic "Sum" \
    --period 300 \
    --threshold 5 \
    --comparison-operator "GreaterThanThreshold" \
    --dimensions Name=FunctionName,Value=nfe-api \
    --evaluation-periods 1 \
    --alarm-actions "arn:aws:sns:us-east-1:${AWS_ACCOUNT_ID}:nfe-alerts" || {
    log_warning "Erro ao criar alarme CloudWatch - Continue manualmente"
}

# 7. Atualizar status no banco de dados
echo
log_info "7. Registrando ativa√ß√£o no banco..."

# Conectar ao banco e registrar a ativa√ß√£o
timestamp=$(date -u +"%Y-%m-%d %H:%M:%S")
activation_log="INSERT INTO sistema_logs (evento, descricao, data_evento) VALUES ('PRODUCAO_ATIVADA', 'Modo produ√ß√£o NFe ativado via script', '$timestamp');"

# Executar via psql se dispon√≠vel
if command -v psql &> /dev/null; then
    echo "$activation_log" | psql "$DATABASE_URL" || {
        log_warning "N√£o foi poss√≠vel registrar no banco - Continue manualmente"
    }
fi

# Resumo final
echo
echo "üéâ PRODU√á√ÉO ATIVADA COM SUCESSO!"
echo "================================"
log_success "‚úÖ Modo NFe REAL est√° ATIVO"
log_success "‚úÖ Ambiente SEFAZ: PRODU√á√ÉO (1)"
log_success "‚úÖ Lambda functions reiniciadas"
log_success "‚úÖ Monitoramento configurado"
log_success "‚úÖ Backup de seguran√ßa realizado"
echo

log_info "üîç MONITORAMENTO ATIVO:"
echo "‚Ä¢ CloudWatch Logs: /aws/lambda/nfe-api"
echo "‚Ä¢ CloudWatch Alarms: NFe-Producao-*"
echo "‚Ä¢ Health Check: $api_endpoint"
echo

log_info "üìã PR√ìXIMOS PASSOS:"
echo "1. Monitore logs em tempo real"
echo "2. Execute testes manuais cuidadosos"
echo "3. Valide primeira NFe real"
echo "4. Configure alertas adicionais se necess√°rio"
echo

log_warning "‚ö†Ô∏è  IMPORTANTE:"
echo "‚Ä¢ Todas as NFe agora s√£o REAIS e t√™m valor fiscal"
echo "‚Ä¢ Monitore constantemente os primeiros dias"
echo "‚Ä¢ Em caso de problemas: bash scripts/emergency-rollback.sh"
echo

log_info "Sistema em PRODU√á√ÉO desde: $(date)"
echo "Ativa√ß√£o registrada em: /var/log/nfe-activation-$(date +%Y%m%d).log" | tee -a "/var/log/nfe-activation-$(date +%Y%m%d).log"
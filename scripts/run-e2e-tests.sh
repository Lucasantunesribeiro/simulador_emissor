#!/bin/bash

# Script para executar testes E2E completos no ambiente de homologa√ß√£o
# Projeto NFe - Sistema de Emiss√£o de Nota Fiscal Eletr√¥nica

set -e

echo "=================================="
echo "üöÄ INICIANDO TESTES E2E COMPLETOS"
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos na raiz do projeto
if [ ! -f "NFe.sln" ]; then
    log_error "Execute este script na raiz do projeto NFe"
    exit 1
fi

# Verificar Docker
if ! docker --version > /dev/null 2>&1; then
    log_error "Docker n√£o est√° instalado ou n√£o est√° em execu√ß√£o"
    exit 1
fi

# Verificar .NET 9
if ! dotnet --version | grep -q "9."; then
    log_error ".NET 9 n√£o est√° instalado"
    exit 1
fi

# Verificar Node.js
if ! node --version > /dev/null 2>&1; then
    log_error "Node.js n√£o est√° instalado"
    exit 1
fi

log_info "Iniciando ambiente de teste..."

# 1. Subir ambiente de teste com Docker Compose
log_info "Subindo containers de teste..."
docker-compose -f docker-compose.test.yml up -d

# Aguardar servi√ßos ficarem prontos
log_info "Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar se PostgreSQL est√° pronto
until docker-compose -f docker-compose.test.yml exec postgres-test pg_isready -U nfeadmin > /dev/null 2>&1; do
    log_info "Aguardando PostgreSQL..."
    sleep 5
done
log_success "PostgreSQL pronto"

# Verificar se LocalStack est√° pronto
until curl -f http://localhost:4566/health > /dev/null 2>&1; do
    log_info "Aguardando LocalStack..."
    sleep 5
done
log_success "LocalStack pronto"

# 2. Executar testes backend
log_info "üß™ EXECUTANDO TESTES BACKEND E2E"
echo "================================"

cd NFe.Tests.E2E

log_info "Restaurando pacotes..."
dotnet restore

log_info "Executando testes de fluxo completo..."
dotnet test --filter "Category=FluxoCompleto" --logger "console;verbosity=detailed" || true

log_info "Executando testes de integra√ß√£o SEFAZ..."
dotnet test --filter "Category=Integration" --logger "console;verbosity=detailed" || true

log_info "Executando testes de Worker SQS..."
dotnet test --filter "Category=Worker" --logger "console;verbosity=detailed" || true

log_info "Executando testes de performance..."
dotnet test --filter "Category=Performance" --logger "console;verbosity=detailed" || true

log_info "Executando testes de seguran√ßa..."
dotnet test --filter "Category=Security" --logger "console;verbosity=detailed" || true

log_info "Executando todos os testes E2E..."
dotnet test --logger "console;verbosity=detailed" --logger "junit;LogFilePath=../test-results/backend-results.xml"

cd ..

log_success "Testes backend conclu√≠dos"

# 3. Executar testes frontend
log_info "üé≠ EXECUTANDO TESTES FRONTEND E2E"
echo "================================="

cd NFe.WebApp

log_info "Instalando depend√™ncias..."
npm ci

log_info "Instalando Playwright..."
npx playwright install --with-deps

log_info "Executando testes de autentica√ß√£o..."
npx playwright test auth-flow --reporter=line || true

log_info "Executando testes de vendas..."
npx playwright test vendas-flow --reporter=line || true

log_info "Executando testes de dashboard..."
npx playwright test dashboard --reporter=line || true

log_info "Executando todos os testes Playwright..."
npx playwright test --reporter=html,line

cd ..

log_success "Testes frontend conclu√≠dos"

# 4. Gerar relat√≥rios
log_info "üìä GERANDO RELAT√ìRIOS"
echo "===================="

mkdir -p test-results

# Copiar relat√≥rios Playwright
if [ -d "NFe.WebApp/playwright-report" ]; then
    cp -r NFe.WebApp/playwright-report test-results/
    log_success "Relat√≥rio Playwright copiado"
fi

# Gerar relat√≥rio de cobertura se dispon√≠vel
if [ -f "NFe.Tests.E2E/TestResults/*/coverage.cobertura.xml" ]; then
    log_info "Gerando relat√≥rio de cobertura..."
    dotnet tool install --global dotnet-reportgenerator-globaltool || true
    reportgenerator -reports:NFe.Tests.E2E/TestResults/*/coverage.cobertura.xml -targetdir:test-results/coverage-report || true
    log_success "Relat√≥rio de cobertura gerado"
fi

# 5. Coleta de logs
log_info "üìã COLETANDO LOGS"
echo "================="

mkdir -p test-results/logs

# Logs dos containers
docker-compose -f docker-compose.test.yml logs postgres-test > test-results/logs/postgres.log || true
docker-compose -f docker-compose.test.yml logs redis-test > test-results/logs/redis.log || true
docker-compose -f docker-compose.test.yml logs localstack > test-results/logs/localstack.log || true
docker-compose -f docker-compose.test.yml logs api-test > test-results/logs/api.log || true
docker-compose -f docker-compose.test.yml logs worker-test > test-results/logs/worker.log || true

log_success "Logs coletados"

# 6. Limpeza
log_info "üßπ LIMPEZA DO AMBIENTE"
echo "====================="

log_info "Parando containers de teste..."
docker-compose -f docker-compose.test.yml down -v

log_info "Removendo volumes n√£o utilizados..."
docker volume prune -f > /dev/null 2>&1 || true

log_success "Limpeza conclu√≠da"

# 7. Resumo final
echo ""
echo "=================================="
echo "üìã RESUMO DOS TESTES E2E"
echo "=================================="

if [ -f "test-results/backend-results.xml" ]; then
    BACKEND_TESTS=$(grep -o 'tests="[0-9]*"' test-results/backend-results.xml | grep -o '[0-9]*' || echo "0")
    BACKEND_FAILURES=$(grep -o 'failures="[0-9]*"' test-results/backend-results.xml | grep -o '[0-9]*' || echo "0")
    echo "Backend: $BACKEND_TESTS testes, $BACKEND_FAILURES falhas"
fi

if [ -d "NFe.WebApp/test-results" ]; then
    FRONTEND_REPORT=$(find NFe.WebApp/test-results -name "*.json" -exec cat {} \; 2>/dev/null | grep -o '"passed":[0-9]*' | head -1 | grep -o '[0-9]*' || echo "0")
    echo "Frontend: Relat√≥rio dispon√≠vel em test-results/playwright-report/"
fi

echo ""
log_info "Relat√≥rios dispon√≠veis em: ./test-results/"
log_info "Logs dos containers em: ./test-results/logs/"

if [ -f "test-results/playwright-report/index.html" ]; then
    log_info "Relat√≥rio Playwright: file://$(pwd)/test-results/playwright-report/index.html"
fi

if [ -f "test-results/coverage-report/index.html" ]; then
    log_info "Relat√≥rio de cobertura: file://$(pwd)/test-results/coverage-report/index.html"
fi

echo ""
echo "=================================="
log_success "üéâ TESTES E2E CONCLU√çDOS"
echo "=================================="

echo ""
log_warning "PR√ìXIMOS PASSOS:"
echo "1. Revisar relat√≥rios de teste"
echo "2. Verificar cobertura de c√≥digo"
echo "3. Analisar logs para poss√≠veis melhorias"
echo "4. Configurar certificado A1 real para homologa√ß√£o"
echo "5. Executar testes com dados reais da SEFAZ"